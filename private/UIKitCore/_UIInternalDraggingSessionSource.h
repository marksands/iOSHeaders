//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <UIKitCore/_UIDraggingImageSlotOwner.h>

@class NSArray, NSSet, NSXPCListenerEndpoint, PBItemCollection, UIDragEvent, UIView, UIWindow, _DUITouchRoutingPolicy, _UIDragSetDownAnimation, _UIDraggingSession;

__attribute__((visibility("hidden")))
@interface _UIInternalDraggingSessionSource : _UIDraggingImageSlotOwner
{
    struct CGPoint _lastNotifiedCentroid;
    _Bool _hasProvidedFenceOnce;
    PBItemCollection *_pbItemCollection;
    _DUITouchRoutingPolicy *_touchRoutingPolicy;
    _UIDragSetDownAnimation *_setDownAnimation;
    long long _stateAfterSetDown;
    _Bool _sentWillEnd;
    _Bool _hostIsActive;
    _Bool _originatedInHostedWindow;
    unsigned int _sessionIdentifier;
    _UIDraggingSession *_publicSession;
    UIDragEvent *_dragEvent;
    UIView *_sourceView;
    long long _state;
    unsigned long long _resultOperation;
    NSArray *_internalItems;
    long long _dataOwner;
    NSSet *_touches;
    NSXPCListenerEndpoint *_accessibilityEndpoint;
    UIWindow *_centroidWindow;
    unsigned long long _withinAppSourceOperationMask;
    unsigned long long _outsideAppSourceOperationMask;
    id <_UIDruidSourceConnection> _druidConnection;
    struct CGPoint _centroid;
}

@property(retain, nonatomic) id <_UIDruidSourceConnection> druidConnection; // @synthesize druidConnection=_druidConnection;
@property(readonly, nonatomic) unsigned long long outsideAppSourceOperationMask; // @synthesize outsideAppSourceOperationMask=_outsideAppSourceOperationMask;
@property(readonly, nonatomic) unsigned long long withinAppSourceOperationMask; // @synthesize withinAppSourceOperationMask=_withinAppSourceOperationMask;
@property(readonly, nonatomic) unsigned int sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
@property(readonly, nonatomic) UIWindow *centroidWindow; // @synthesize centroidWindow=_centroidWindow;
@property(readonly, nonatomic) struct CGPoint centroid; // @synthesize centroid=_centroid;
@property(retain, nonatomic) NSXPCListenerEndpoint *accessibilityEndpoint; // @synthesize accessibilityEndpoint=_accessibilityEndpoint;
@property(copy, nonatomic) NSSet *touches; // @synthesize touches=_touches;
@property(nonatomic) long long dataOwner; // @synthesize dataOwner=_dataOwner;
@property(copy, nonatomic) NSArray *internalItems; // @synthesize internalItems=_internalItems;
@property(nonatomic) unsigned long long resultOperation; // @synthesize resultOperation=_resultOperation;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(nonatomic) __weak UIView *sourceView; // @synthesize sourceView=_sourceView;
@property(nonatomic) __weak UIDragEvent *dragEvent; // @synthesize dragEvent=_dragEvent;
@property(readonly, nonatomic) _UIDraggingSession *publicSession; // @synthesize publicSession=_publicSession;
- (void).cxx_destruct;
- (void)_hostDidDeactivate;
- (void)_hostWillBecomeActive;
@property(readonly, nonatomic) _Bool isActive;
@property(readonly, nonatomic) _Bool canAddItems;
- (void)cancelDrag;
@property(readonly, nonatomic) _Bool shouldCancelOnAppDeactivation;
- (void)_sendWillEndWithOperation:(unsigned long long)arg1;
- (void)_handOffCancelledItems:(id)arg1;
- (void)addPublicItems:(id)arg1;
- (void)dragDidExitApp;
- (void)updateCentroidFromDragEvent;
- (void)itemsBecameDirty:(id)arg1;
- (void)_getOperationMaskFromDelegate;
- (void)_didBeginDrag;
- (void)beginDrag:(CDUnknownBlockType)arg1;
- (_Bool)dynamicallyUpdatesPrefersFullSizePreviews;
@property(readonly, nonatomic) _Bool prefersFullSizePreview;
- (_Bool)preventsSimultaneousDragFromView:(id)arg1;
- (void)setCentroid:(struct CGPoint)arg1 inWindow:(id)arg2;
- (void)_unregisterContextIDsForAdditionalDragEvents;
- (void)_registerContextIDsForAdditionalDragEvents;
- (id)initWithDragManager:(id)arg1 items:(id)arg2 dataOwner:(long long)arg3 sourceView:(id)arg4;
- (_Bool)touchRoutingPolicyContainsContextIDToAlwaysSend:(unsigned int)arg1;
@property(copy, nonatomic) _DUITouchRoutingPolicy *touchRoutingPolicy;

@end

