//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIControl.h"

#import "CAMZoomButtonDelegate.h"

@class CAMZoomButton, CAMZoomControlButtonMaskView, CAMZoomDial, NSDate, NSString, NSTimer, UIView;

@interface CAMZoomControl : UIControl <CAMZoomButtonDelegate>
{
    struct {
        _Bool respondsToDidChangeZoomFactor;
        _Bool respondsToCanToggleBetweenWideAndTelephoto;
        _Bool respondsToToggleBetweenWideAndTelephoto;
    } _delegateFlags;
    _Bool __zoomDialEnabled;
    _Bool __shouldShowZoomDial;
    _Bool __eligibleForSwipeDownToDismiss;
    id <CAMZoomControlDelegate> _delegate;
    long long _layoutStyle;
    double _zoomFactor;
    long long _orientation;
    CAMZoomButton *__zoomButton;
    CAMZoomDial *__zoomDial;
    UIView *__dialClippingView;
    CAMZoomControlButtonMaskView *__buttonMaskView;
    long long __zoomControlMode;
    double __minimumZoomFactor;
    double __maximumZoomFactor;
    double __dualCameraSwitchOverZoomFactor;
    double __previousTouchTime;
    NSTimer *__zoomDialVisibilityTimer;
    NSDate *__startTimeForHideAnimationInProgress;
    double _zoomButtonMaxYWhenContracted;
    double _zoomDialRadius;
    struct CGPoint __startTouchLocation;
    struct CGPoint __previousTouchLocation;
    struct UIEdgeInsets _contentInsets;
}

@property(nonatomic) double zoomDialRadius; // @synthesize zoomDialRadius=_zoomDialRadius;
@property(nonatomic) double zoomButtonMaxYWhenContracted; // @synthesize zoomButtonMaxYWhenContracted=_zoomButtonMaxYWhenContracted;
@property(nonatomic) struct UIEdgeInsets contentInsets; // @synthesize contentInsets=_contentInsets;
@property(retain, nonatomic, setter=_setStartTimeForHideAnimationInProgress:) NSDate *_startTimeForHideAnimationInProgress; // @synthesize _startTimeForHideAnimationInProgress=__startTimeForHideAnimationInProgress;
@property(retain, nonatomic, setter=_setZoomDialVisibilityTimer:) NSTimer *_zoomDialVisibilityTimer; // @synthesize _zoomDialVisibilityTimer=__zoomDialVisibilityTimer;
@property(nonatomic, getter=_isEligibleForSwipeDownToDismiss, setter=_setEligibleForSwipeDownToDismiss:) _Bool _eligibleForSwipeDownToDismiss; // @synthesize _eligibleForSwipeDownToDismiss=__eligibleForSwipeDownToDismiss;
@property(nonatomic, setter=_setPreviousTouchTime:) double _previousTouchTime; // @synthesize _previousTouchTime=__previousTouchTime;
@property(nonatomic, setter=_setPreviousTouchLocation:) struct CGPoint _previousTouchLocation; // @synthesize _previousTouchLocation=__previousTouchLocation;
@property(nonatomic, setter=_setStartTouchLocation:) struct CGPoint _startTouchLocation; // @synthesize _startTouchLocation=__startTouchLocation;
@property(nonatomic, setter=_setShouldShowZoomDial:) _Bool _shouldShowZoomDial; // @synthesize _shouldShowZoomDial=__shouldShowZoomDial;
@property(nonatomic, getter=_isZoomDialEnabled, setter=_setZoomDialEnabled:) _Bool _zoomDialEnabled; // @synthesize _zoomDialEnabled=__zoomDialEnabled;
@property(nonatomic, setter=_setDualCameraSwitchOverZoomFactor:) double _dualCameraSwitchOverZoomFactor; // @synthesize _dualCameraSwitchOverZoomFactor=__dualCameraSwitchOverZoomFactor;
@property(nonatomic, setter=_setMaximumZoomFactor:) double _maximumZoomFactor; // @synthesize _maximumZoomFactor=__maximumZoomFactor;
@property(nonatomic, setter=_setMinimumZoomFactor:) double _minimumZoomFactor; // @synthesize _minimumZoomFactor=__minimumZoomFactor;
@property(nonatomic, setter=_setZoomControlMode:) long long _zoomControlMode; // @synthesize _zoomControlMode=__zoomControlMode;
@property(readonly, nonatomic) CAMZoomControlButtonMaskView *_buttonMaskView; // @synthesize _buttonMaskView=__buttonMaskView;
@property(readonly, nonatomic) UIView *_dialClippingView; // @synthesize _dialClippingView=__dialClippingView;
@property(readonly, nonatomic) CAMZoomDial *_zoomDial; // @synthesize _zoomDial=__zoomDial;
@property(readonly, nonatomic) CAMZoomButton *_zoomButton; // @synthesize _zoomButton=__zoomButton;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic) double zoomFactor; // @synthesize zoomFactor=_zoomFactor;
@property(nonatomic) long long layoutStyle; // @synthesize layoutStyle=_layoutStyle;
@property(nonatomic) __weak id <CAMZoomControlDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)zoomButtonDidLayout;
- (void)_handleButtonTappedForWideOrTeleMode;
- (void)_handleButtonTappedForDualCameraMode;
- (void)_handleButtonTapped;
- (void)_cleanupForCancelTracking;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)_isWithinZoomButtonBoundsWithTouch:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (_Bool)_shouldInterceptTouchesForHidingZoomDial;
- (double)_normalizeValue:(double)arg1 betweenMinimumValue:(double)arg2 maximumValue:(double)arg3;
- (double)_additionalAccelerationForMovementFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 deltaX:(double)arg3;
- (double)_accelerationForMovementFromPointFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 elapsedTime:(double)arg3;
- (double)_dampingFactorForMovementFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
- (double)_dampingFactorForPerpendicularityFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
- (double)_dampingFactorForDistanceFromDialForPoint:(struct CGPoint)arg1;
- (double)_distanceFromDialClippingViewToPoint:(struct CGPoint)arg1;
- (void)setOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)_updateMaskViewForZoomButtonHighlightingTransform;
- (void)layoutSubviews;
- (struct UIEdgeInsets)alignmentRectInsets;
- (void)_cancelDelayedZoomDialVisibilityChange;
- (void)_handleZoomDialVisibilityTimerFiredWithUserInfo:(id)arg1;
- (void)_setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2 afterDelay:(double)arg3;
- (void)setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2;
- (void)_setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2;
- (void)_setZoomDialEnabled:(_Bool)arg1 animationDuration:(long long)arg2;
@property(nonatomic) NSString *contentSizeCategory;
@property(readonly, nonatomic) double zoomDialBorderWidth;
@property(nonatomic) _Bool shouldDisableValuesBelowDualCameraSwitchOver;
- (void)_setZoomFactor:(double)arg1 interactionType:(long long)arg2 shouldNotifyDelegate:(_Bool)arg3;
- (double)_zoomFactorForDisplayZoomValue:(double)arg1;
- (double)_displayZoomValueForZoomFactor:(double)arg1;
@property(nonatomic, setter=_setDisplayDualCameraSwitchOverZoomFactor:) double _displayDualCameraSwitchOverZoomFactor;
@property(nonatomic, setter=_setDisplayMaximumZoomFactor:) double _displayMaximumZoomFactor;
@property(nonatomic, setter=_setDisplayMinimumZoomFactor:) double _displayMinimumZoomFactor;
@property(readonly, nonatomic) double _displayZoomValue;
- (void)_updateDisplayedValues;
- (void)configureForToggleOnlyWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5;
- (void)configureForSingleCameraPlusToggleWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5;
- (void)configureForDualDeviceWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5 dualCameraSwitchOverZoomFactor:(double)arg6 displayDualCameraSwitchOverZoomFactor:(double)arg7;
- (void)_configureForControlMode:(long long)arg1 zoomFactor:(double)arg2 minimumZoomFactor:(double)arg3 displayMinimumZoomFactor:(double)arg4 maximumZoomFactor:(double)arg5 displayMaximumZoomFactor:(double)arg6 dualCameraSwitchOverZoomFactor:(double)arg7 displayDualCameraSwitchOverZoomFactor:(double)arg8;
- (id)initWithLayoutStyle:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

