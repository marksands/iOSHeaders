//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Named Structures

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct FLCompoundSpring {
    struct FLSimpleSpringState state;
    struct FLSimpleSpring stiffness;
    struct FLSimpleSpring damping;
    struct FLSimpleSpring dampingRatio;
    struct FLSimpleSpring response;
    struct FLSimpleSpring anchor;
    _Bool usesDampingRatioResponse;
};

struct FLSimpleSpring {
    struct FLSimpleSpringState state;
    double mass;
    double stiffness;
    double damping;
    double anchor;
    double stablePositionThreshold;
    double stableVelocityThreshold;
};

struct FLSimpleSpringState {
    double position;
    double velocity;
};

struct FLSpringParameters {
    double dampingRatio;
    double dampingRatioSmoothing;
    double response;
    double responseSmoothing;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct vector<ASVControlPoint, std::__1::allocator<ASVControlPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<ASVControlPoint *, std::__1::allocator<ASVControlPoint>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<ASVPatchData, std::__1::allocator<ASVPatchData>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<ASVPatchData *, std::__1::allocator<ASVPatchData>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<unsigned short, std::__1::allocator<unsigned short>> {
    unsigned short *__begin_;
    unsigned short *__end_;
    struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> {
        unsigned short *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    float _field1;
} CDStruct_37a3040a;

typedef struct CDStruct_183601bc;

