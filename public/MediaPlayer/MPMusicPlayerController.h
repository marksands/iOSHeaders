//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "MPMediaPlayback.h"
#import "MPRequestResponseControllerDelegate.h"
#import "MPSystemMusicPlayerController.h"
#import "MPVolumeControllerDelegate.h"

@class MPArtworkCatalog, MPMediaItem, MPMusicPlayerQueueDescriptor, MPRequestResponseController, MPVolumeController, NSMutableDictionary, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSString;

@interface MPMusicPlayerController : NSObject <MPVolumeControllerDelegate, MPSystemMusicPlayerController, MPRequestResponseControllerDelegate, MPMediaPlayback>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSObject<OS_dispatch_group> *_pendingRequestGroup;
    MPMusicPlayerQueueDescriptor *_pendingQueueDescriptor;
    CDUnknownBlockType _pendingPrepareCompletion;
    NSMutableDictionary *_responseValidators;
    MPArtworkCatalog *_previousArtworkCatalog;
    _Bool _hasPreparedToPlay;
    MPMediaItem *_pendingNowPlayingItem;
    NSObject<OS_dispatch_queue> *_pendingPrepareCalloutQueue;
    _Bool _legacyClient;
    MPMusicPlayerQueueDescriptor *_queueDescriptor;
    MPVolumeController *_volumeController;
    MPRequestResponseController *_requestController;
}

+ (_Bool)_isPlayerInstalled;
+ (id)iPodMusicPlayer;
+ (void)setRunLoopForNotifications:(id)arg1;
+ (id)supportedProperties;
+ (id)systemMusicPlayer;
+ (id)applicationQueuePlayer;
+ (id)applicationMusicPlayer;
@property(retain, nonatomic) MPRequestResponseController *requestController; // @synthesize requestController=_requestController;
@property(retain, nonatomic) MPVolumeController *volumeController; // @synthesize volumeController=_volumeController;
@property(retain, nonatomic) MPMusicPlayerQueueDescriptor *queueDescriptor; // @synthesize queueDescriptor=_queueDescriptor;
@property(readonly, nonatomic, getter=isLegacyClient) _Bool legacyClient; // @synthesize legacyClient=_legacyClient;
- (void).cxx_destruct;
- (void)_preflightRequestIfNeeded;
- (id)_mediaItemFromSong:(id)arg1;
- (void)setVolumePrivate:(float)arg1;
@property(nonatomic) float volume;
- (id)queueAsQuery;
- (void)setPlaybackSpeed:(long long)arg1;
- (long long)playbackSpeed;
- (id)nowPlayingItemAtIndex:(unsigned long long)arg1;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)didFinishLoadingRequestForController:(id)arg1;
- (void)willBeginLoadingRequestForController:(id)arg1;
- (void)controller:(id)arg1 defersResponseReplacement:(CDUnknownBlockType)arg2;
- (void)setUserQueueModificationsDisabled:(_Bool)arg1;
- (_Bool)userQueueModificationsDisabled;
- (void)shuffle;
- (void)skipToBeginningOrPreviousItem;
- (void)skipToBeginning;
- (void)setQueueWithRadioStation:(id)arg1;
- (void)setQueueWithGeniusMixPlaylist:(id)arg1;
- (void)setQueueWithQuery:(id)arg1 firstItem:(id)arg2;
- (_Bool)setQueueWithSeedItems:(id)arg1;
- (id)queueAsRadioStation;
- (void)prepareQueueForPlayback;
- (void)pauseWithFadeoutDuration:(double)arg1;
- (unsigned long long)numberOfItems;
- (_Bool)isNowPlayingItemFromGeniusMix;
- (_Bool)isGeniusAvailableForSeedItems:(id)arg1;
- (_Bool)isGeniusAvailable;
- (unsigned long long)currentChapterIndex;
- (void)openToPlayQueueDescriptor:(id)arg1;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
@property(nonatomic) float currentPlaybackRate;
@property(nonatomic) double currentPlaybackTime;
- (void)stop;
- (void)pause;
- (void)play;
@property(readonly, nonatomic) _Bool isPreparedToPlay;
- (void)prepareToPlay;
- (void)endGeneratingPlaybackNotifications;
- (void)beginGeneratingPlaybackNotifications;
- (void)skipToPreviousItem;
- (void)skipToNextItem;
- (void)prepareToPlayWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)appendQueueDescriptor:(id)arg1;
- (void)prependQueueDescriptor:(id)arg1;
- (void)setQueueWithDescriptor:(id)arg1;
- (void)setQueueWithStoreIDs:(id)arg1;
- (void)setQueueWithItemCollection:(id)arg1;
- (void)setQueueWithQuery:(id)arg1;
@property(readonly, nonatomic) unsigned long long indexOfNowPlayingItem;
@property(copy, nonatomic) MPMediaItem *nowPlayingItem;
@property(nonatomic) long long shuffleMode;
@property(nonatomic) long long repeatMode;
@property(readonly, nonatomic) long long playbackState;
- (id)_init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

