//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <MediaPlayer/MPModelObject.h>

@class MPModelArtist, MPModelGenre, MPModelSong, NSDate, NSDateComponents, NSString;

@interface MPModelAlbum : MPModelObject
{
}

+ (id)__songPopularityBlock_KEY;
+ (id)__shortEditorNotes_KEY;
+ (id)__editorNotes_KEY;
+ (id)__preorder_KEY;
+ (id)__lastDevicePlaybackDate_KEY;
+ (id)__libraryAddEligible_KEY;
+ (id)__keepLocalManagedStatus_KEY;
+ (id)__keepLocalEnableState_KEY;
+ (id)__volumeNormalization_KEY;
+ (id)__libraryAdded_KEY;
+ (id)__year_KEY;
+ (id)__libraryAddedDate_KEY;
+ (id)__copyrightText_KEY;
+ (id)__artworkCatalogBlock_KEY;
+ (id)__releaseDateComponents_KEY;
+ (id)__classical_KEY;
+ (id)__compilation_KEY;
+ (id)__hasExplicitContent_KEY;
+ (id)__hasCleanContent_KEY;
+ (id)__discCount_KEY;
+ (id)__maximumItemTrackNumber_KEY;
+ (id)__trackCount_KEY;
+ (id)__representativeSong_KEY;
+ (id)__genre_KEY;
+ (id)__artist_KEY;
+ (id)__title_KEY;
+ (id)kindWithVariants:(unsigned long long)arg1 songKind:(id)arg2 options:(unsigned long long)arg3;
+ (id)kindWithVariants:(unsigned long long)arg1 songKind:(id)arg2;
+ (id)kindWithSongKind:(id)arg1 options:(unsigned long long)arg2;
+ (id)kindWithSongKind:(id)arg1;
+ (id)requiredLibraryAddStatusObservationProperties;
+ (_Bool)supportsLibraryAddStatusObservation;
+ (_Bool)supportsLibraryRemoval;
+ (id)requiredLibraryRemovalProperties;
+ (_Bool)supportsKeepLocalStatusObservation;
+ (id)requiredKeepLocalStatusObservationProperties;
+ (id)requiredStoreLibraryPersonalizationProperties;
- (id)songPopularityForIdentifiers:(id)arg1;
- (id)artworkCatalog;
- (id)humanDescription;
- (id)contentItemCollectionInfo;
- (struct MPLibraryAddStatusObserverConfiguration)libraryAddStatusObserverConfiguration;
- (long long)libraryRemovalSupportedOptions;
- (id)newKeepLocalStatusObserverConfiguration;
- (id)objectWithStoreLibraryPersonalizationRelativeModelObject:(id)arg1;
- (id)relativeModelObjectForStoreLibraryPersonalization;
- (id)personalizationScopedPropertiesForProperties:(id)arg1;

// Remaining properties
@property(retain, nonatomic) MPModelArtist *artist; // @dynamic artist;
@property(copy, nonatomic) CDUnknownBlockType artworkCatalogBlock; // @dynamic artworkCatalogBlock;
@property(nonatomic, getter=isClassical) _Bool classical; // @dynamic classical;
@property(nonatomic, getter=isCompilation) _Bool compilation; // @dynamic compilation;
@property(copy, nonatomic) NSString *copyrightText; // @dynamic copyrightText;
@property(nonatomic) long long discCount; // @dynamic discCount;
@property(copy, nonatomic) NSString *editorNotes; // @dynamic editorNotes;
@property(retain, nonatomic) MPModelGenre *genre; // @dynamic genre;
@property(nonatomic) _Bool hasCleanContent; // @dynamic hasCleanContent;
@property(nonatomic) _Bool hasExplicitContent; // @dynamic hasExplicitContent;
@property(nonatomic) long long keepLocalEnableState; // @dynamic keepLocalEnableState;
@property(nonatomic) long long keepLocalManagedStatus; // @dynamic keepLocalManagedStatus;
@property(copy, nonatomic) NSDate *lastDevicePlaybackDate; // @dynamic lastDevicePlaybackDate;
@property(nonatomic, getter=isLibraryAddEligible) _Bool libraryAddEligible; // @dynamic libraryAddEligible;
@property(nonatomic, getter=isLibraryAdded) _Bool libraryAdded; // @dynamic libraryAdded;
@property(copy, nonatomic) NSDate *libraryAddedDate; // @dynamic libraryAddedDate;
@property(nonatomic) long long maximumItemTrackNumber; // @dynamic maximumItemTrackNumber;
@property(nonatomic, getter=isPreorder) _Bool preorder; // @dynamic preorder;
@property(copy, nonatomic) NSDateComponents *releaseDateComponents; // @dynamic releaseDateComponents;
@property(retain, nonatomic) MPModelSong *representativeSong; // @dynamic representativeSong;
@property(copy, nonatomic) NSString *shortEditorNotes; // @dynamic shortEditorNotes;
@property(copy, nonatomic) CDUnknownBlockType songPopularityBlock; // @dynamic songPopularityBlock;
@property(copy, nonatomic) NSString *title; // @dynamic title;
@property(nonatomic) long long trackCount; // @dynamic trackCount;
@property(nonatomic) float volumeNormalization; // @dynamic volumeNormalization;
@property(nonatomic) long long year; // @dynamic year;

@end

